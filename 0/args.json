{"dependencies":[{"uri":"file:///usr/local/Cellar/dart-editor/21658/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/21658/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"comment":"\nThis library lets you define parsers for parsing raw command-line arguments\ninto a set of options and values using [GNU][] and [POSIX][] style options.\n\n## Defining options ##\n\nTo use this library, you create an [ArgParser] object which will contain\nthe set of options you support:\n\n    var parser = new ArgParser();\n\nThen you define a set of options on that parser using [addOption()] and\n[addFlag()]. The minimal way to create an option is:\n\n    parser.addOption('name');\n\nThis creates an option named \"name\". Options must be given a value on the\ncommand line. If you have a simple on/off flag, you can instead use:\n\n    parser.addFlag('name');\n\nFlag options will, by default, accept a 'no-' prefix to negate the option.\nThis can be disabled like so:\n\n    parser.addFlag('name', negatable: false);\n\n(From here on out \"option\" will refer to both \"regular\" options and flags.\nIn cases where the distinction matters, we'll use \"non-flag option\".)\n\nOptions may have an optional single-character abbreviation:\n\n    parser.addOption('mode', abbr: 'm');\n    parser.addFlag('verbose', abbr: 'v');\n\nThey may also specify a default value. The default value will be used if the\noption isn't provided:\n\n    parser.addOption('mode', defaultsTo: 'debug');\n    parser.addFlag('verbose', defaultsTo: false);\n\nThe default value for non-flag options can be any [String]. For flags, it\nmust be a [bool].\n\nTo validate non-flag options, you may provide an allowed set of values. When\nyou do, it will throw a [FormatException] when you parse the arguments if\nthe value for an option is not in the allowed set:\n\n    parser.addOption('mode', allowed: ['debug', 'release']);\n\nYou can provide a callback when you define an option. When you later parse\na set of arguments, the callback for that option will be invoked with the\nvalue provided for it:\n\n    parser.addOption('mode', callback: (mode) => print('Got mode $mode));\n    parser.addFlag('verbose', callback: (verbose) {\n      if (verbose) print('Verbose');\n    });\n\nThe callback for each option will *always* be called when you parse a set of\narguments. If the option isn't provided in the args, the callback will be\npassed the default value, or `null` if there is none set.\n\n## Parsing arguments ##\n\nOnce you have an [ArgParser] set up with some options and flags, you use it\nby calling [ArgParser.parse()] with a set of arguments:\n\n    var results = parser.parse(['some', 'command', 'line', 'args']);\n\nThese will usually come from `new Options().arguments`, but you can pass in\nany list of strings. It returns an instance of [ArgResults]. This is a\nmap-like object that will return the value of any parsed option.\n\n    var parser = new ArgParser();\n    parser.addOption('mode');\n    parser.addFlag('verbose', defaultsTo: true);\n    var results = parser.parse('['--mode', 'debug', 'something', 'else']);\n\n    print(results['mode']); // debug\n    print(results['verbose']); // true\n\nThe [parse()] method will stop as soon as it reaches `--` or anything that\nit doesn't recognize as an option, flag, or option value. If there are still\narguments left, they will be provided to you in\n[ArgResults.rest].\n\n    print(results.rest); // ['something', 'else']\n\n## Specifying options ##\n\nTo actually pass in options and flags on the command line, use GNU or POSIX\nstyle. If you define an option like:\n\n    parser.addOption('name', abbr: 'n');\n\nThen a value for it can be specified on the command line using any of:\n\n    --name=somevalue\n    --name somevalue\n    -nsomevalue\n    -n somevalue\n\nGiven this flag:\n\n    parser.addFlag('name', abbr: 'n');\n\nYou can set it on using one of:\n\n    --name\n    -n\n\nOr set it off using:\n\n    --no-name\n\nMultiple flag abbreviation can also be collapsed into a single argument. If\nyou define:\n\n    parser.addFlag('verbose', abbr: 'v');\n    parser.addFlag('french', abbr: 'f');\n    parser.addFlag('iambic-pentameter', abbr: 'i');\n\nThen all three flags could be set using:\n\n    -vfi\n\nBy default, an option has only a single value, with later option values\noverriding earlier ones; for example:\n\n    var parser = new ArgParser();\n    parser.addOption('mode');\n    var results = parser.parse(['--mode', 'on', '--mode', 'off']);\n    print(results['mode']); // prints 'off'\n\nIf you need multiple values, set the [allowMultiple] flag. In that\ncase the option can occur multiple times and when parsing arguments a\nList of values will be returned:\n\n    var parser = new ArgParser();\n    parser.addOption('mode', allowMultiple: true);\n    var results = parser.parse(['--mode', 'on', '--mode', 'off']);\n    print(results['mode']); // prints '[on, off]'\n\n## Defining commands ##\n\nIn addition to *options*, you can also define *commands*. A command is a\nnamed argument that has its own set of options. For example, when you run:\n\n    $ git commit -a\n\nThe executable is `git`, the command is `commit`, and the `-a` option is an\noption passed to the command. You can add a command like so:\n\n    var parser = new ArgParser();\n    var command = parser.addCommand(\"commit\");\n    command.addFlag('all', abbr: 'a');\n\nIt returns another [ArgParser] which you can use to define options and\nsubcommands on that command. When an argument list is parsed, you can then\ndetermine which command was entered and what options were provided for it.\n\n    var results = parser.parse(['commit', '-a']);\n    print(results.command.name); // \"commit\"\n    print(results.command['a']); // true\n\n## Displaying usage ##\n\nThis library can also be used to automatically generate nice usage help\ntext like you get when you run a program with `--help`. To use this, you\nwill also want to provide some help text when you create your options. To\ndefine help text for the entire option, do:\n\n    parser.addOption('mode', help: 'The compiler configuration',\n        allowed: ['debug', 'release']);\n    parser.addFlag('verbose', help: 'Show additional diagnostic info');\n\nFor non-flag options, you can also provide detailed help for each expected\nvalue using a map:\n\n    parser.addOption('arch', help: 'The architecture to compile for',\n        allowedHelp: {\n          'ia32': 'Intel x86',\n          'arm': 'ARM Holding 32-bit chip'\n        });\n\nIf you define a set of options like the above, then calling this:\n\n    print(parser.getUsage());\n\nWill display something like:\n\n    --mode            The compiler configuration\n                      [debug, release]\n\n    --[no-]verbose    Show additional diagnostic info\n    --arch            The architecture to compile for\n\n          [arm]       ARM Holding 32-bit chip\n          [ia32]      Intel x86\n\nTo assist the formatting of the usage help, single line help text will\nbe followed by a single new line. Options with multi-line help text\nwill be followed by two new lines. This provides spatial diversity between\noptions.\n\n[posix]: http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02\n[gnu]: http://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces\n","uri":"package:args/args.dart","name":"package:args/args.dart","id":"args","children":[{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe results of parsing a series of command line arguments using\n[ArgParser.parse()]. Includes the parsed options and any remaining unparsed\ncommand line arguments.\n","name":"ArgResults","id":"ArgResults","children":[{"isOperator":true,"comment":"Gets the parsed command-line option named [name]. ","name":"[]","id":"[]1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"411","kind":"method"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Iterable"},"comment":"Get the names of the options as an [Iterable]. ","name":"options","id":"options","line":"421","kind":"property"},{"ref":{"refId":"dart.core/Map","name":"Map"},"isFinal":true,"name":"_options","isPrivate":true,"id":"_options","line":"386","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"\nIf these are the results for parsing a command's options, this will be\nthe name of the command. For top-level results, this returns `null`.\n","name":"name","id":"name","line":"392","kind":"variable"},{"ref":{"refId":"args/ArgResults","name":"ArgResults"},"isFinal":true,"comment":"\nThe command that was selected, or `null` if none was. This will contain\nthe options that were selected for that command.\n","name":"command","id":"command","line":"398","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isFinal":true,"comment":"\nThe remaining command-line arguments that were not parsed as options or\nflags. If `--` was used to separate the options from the remaining\narguments, it will not be included in this list.\n","name":"rest","id":"rest","line":"405","kind":"variable"},{"comment":"Creates a new [ArgResults]. ","name":"ArgResults","id":"ArgResults4()","children":[{"initializedField":{"refId":"args/ArgResults/_options","name":"_options"},"ref":{"refId":"dart.core/Map","name":"Map"},"name":"_options","isPrivate":true,"id":"_options","kind":"param"},{"initializedField":{"refId":"args/ArgResults/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"initializedField":{"refId":"args/ArgResults/command","name":"command"},"ref":{"refId":"args/ArgResults","name":"ArgResults"},"name":"command","id":"command","kind":"param"},{"initializedField":{"refId":"args/ArgResults/rest","name":"rest"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"rest","id":"rest","kind":"param"}],"line":"408","kind":"constructor"}],"line":"385","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA command-line option. Includes both flags and options which take a value.\n","name":"Option","id":"Option","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"name","id":"name","line":"338","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"abbreviation","id":"abbreviation","line":"339","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isFinal":true,"name":"allowed","id":"allowed","line":"340","kind":"variable"},{"isFinal":true,"name":"defaultValue","id":"defaultValue","line":"341","kind":"variable"},{"ref":{"refId":"dart.core/Function","name":"Function"},"isFinal":true,"name":"callback","id":"callback","line":"342","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"help","id":"help","line":"343","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"isFinal":true,"name":"allowedHelp","id":"allowedHelp","line":"344","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"name":"isFlag","id":"isFlag","line":"345","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"name":"negatable","id":"negatable","line":"346","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"name":"allowMultiple","id":"allowMultiple","line":"347","kind":"variable"},{"isFinal":true,"isStatic":true,"name":"_invalidChars","isPrivate":true,"id":"_invalidChars","line":"377","kind":"variable"},{"name":"Option","id":"Option10()","children":[{"initializedField":{"refId":"args/Option/name","name":"name"},"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"initializedField":{"refId":"args/Option/abbreviation","name":"abbreviation"},"ref":{"refId":"dart.core/String","name":"String"},"name":"abbreviation","id":"abbreviation","kind":"param"},{"initializedField":{"refId":"args/Option/help","name":"help"},"ref":{"refId":"dart.core/String","name":"String"},"name":"help","id":"help","kind":"param"},{"initializedField":{"refId":"args/Option/allowed","name":"allowed"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"allowed","id":"allowed","kind":"param"},{"initializedField":{"refId":"args/Option/allowedHelp","name":"allowedHelp"},"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"name":"allowedHelp","id":"allowedHelp","line":"350","kind":"param"},{"initializedField":{"refId":"args/Option/defaultValue","name":"defaultValue"},"name":"defaultValue","id":"defaultValue","line":"350","kind":"param"},{"initializedField":{"refId":"args/Option/callback","name":"callback"},"ref":{"refId":"dart.core/Function","name":"Function"},"name":"callback","id":"callback","line":"350","kind":"param"},{"initializedField":{"refId":"args/Option/isFlag","name":"isFlag"},"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"name":"isFlag","id":"isFlag","line":"350","kind":"param"},{"initializedField":{"refId":"args/Option/negatable","name":"negatable"},"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"name":"negatable","id":"negatable","line":"351","kind":"param"},{"initializedField":{"refId":"args/Option/allowMultiple","name":"allowMultiple"},"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"allowMultiple","id":"allowMultiple","line":"351","kind":"param"}],"line":"349","kind":"constructor"}],"line":"337","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nA class for taking a list of raw command line arguments and parsing out\noptions and flags from them.\n","name":"ArgParser","id":"ArgParser","children":[{"returnType":{"refId":"args/ArgParser","name":"ArgParser"},"comment":"\nDefines a command. A command is a named argument which may in turn\ndefine its own options and subcommands. Returns an [ArgParser] that can\nbe used to define the command's options.\n","name":"addCommand","id":"addCommand1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"}],"line":"241","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nDefines a flag. Throws an [ArgumentError] if:\n\n* There is already an option named [name].\n* There is already an option using abbreviation [abbr].\n","name":"addFlag","id":"addFlag6()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"abbr","id":"abbr","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"help","id":"help","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"defaultsTo","id":"defaultsTo","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"negatable","id":"negatable","line":"259","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"callback","id":"callback","children":[{"returnType":{"refId":"void","name":"void"},"uri":"file:///usr/local/Cellar/dart-editor/21658/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/bool","name":"bool"},"uri":"package:args/args.dart","name":"value","id":"value","line":"259","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"259","kind":"param"}],"line":"258","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nDefines a value-taking option. Throws an [ArgumentError] if:\n\n* There is already an option with name [name].\n* There is already an option using abbreviation [abbr].\n","name":"addOption","id":"addOption8()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"abbr","id":"abbr","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"help","id":"help","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isOptional":true,"name":"allowed","id":"allowed","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"isOptional":true,"name":"allowedHelp","id":"allowedHelp","line":"271","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"defaultsTo","id":"defaultsTo","line":"271","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"callback","id":"callback","children":[{"returnType":{"refId":"void","name":"void"},"uri":"file:///usr/local/Cellar/dart-editor/21658/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"package:args/args.dart","name":"value","id":"value","line":"272","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"272","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"allowMultiple","id":"allowMultiple","line":"272","kind":"param"}],"line":"270","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_addOption","isPrivate":true,"id":"_addOption10()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"name","id":"name","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"abbr","id":"abbr","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"help","id":"help","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"allowed","id":"allowed","kind":"param"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"name":"allowedHelp","id":"allowedHelp","line":"278","kind":"param"},{"name":"defaultsTo","id":"defaultsTo","line":"278","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"callback","id":"callback","children":[{"returnType":{"refId":"void","name":"void"},"uri":"file:///usr/local/Cellar/dart-editor/21658/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"package:args/args.dart","name":"value","id":"value","line":"279","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"279","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"name":"isFlag","id":"isFlag","line":"279","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"negatable","id":"negatable","line":"279","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","name":"allowMultiple","id":"allowMultiple","line":"280","kind":"param"}],"line":"277","kind":"method"},{"returnType":{"refId":"args/ArgResults","name":"ArgResults"},"comment":"\nParses [args], a list of command-line arguments, matches them against the\nflags and options defined by this parser, and returns the result.\n","name":"parse","id":"parse1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"name":"args","id":"args","kind":"param"}],"line":"304","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nGenerates a string displaying usage information for the defined options.\nThis is basically the help text shown on the command line.\n","name":"getUsage","id":"getUsage0()","line":"311","kind":"method"},{"comment":"\nGet the default value for an option. Useful after parsing to test\nif the user specified something other than the default.\n","name":"getDefault","id":"getDefault1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"option","id":"option","kind":"param"}],"line":"317","kind":"method"},{"returnType":{"refId":"args/Option","name":"Option"},"comment":"\nFinds the option whose abbreviation is [abbr], or `null` if no option has\nthat abbreviation.\n","name":"findByAbbreviation","id":"findByAbbreviation1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"abbr","id":"abbr","kind":"param"}],"line":"328","kind":"method"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"args/Option","name":"Option"}],"name":"Map"},"isFinal":true,"comment":"\nThe options that have been defined for this parser.\n","name":"options","id":"options","line":"226","kind":"variable"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"args/ArgParser","name":"ArgParser"}],"name":"Map"},"isFinal":true,"comment":"\nThe commands that have been defined for this parser.\n","name":"commands","id":"commands","line":"231","kind":"variable"},{"comment":"Creates a new ArgParser. ","name":"ArgParser","id":"ArgParser0()","line":"234","kind":"constructor"}],"line":"222","kind":"class"}],"line":"213","kind":"library"}